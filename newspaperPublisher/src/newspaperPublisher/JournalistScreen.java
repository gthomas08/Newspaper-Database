/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package newspaperPublisher;


import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;



public class JournalistScreen extends javax.swing.JFrame {
    
    Connection conn=null;
    Statement stmt=null;
    PreparedStatement pst=null;
    ResultSet rs=null;
    
    private File[] images = null;
    private String email, password;
    
    /** Creates new form JournalistScreen */
    public JournalistScreen(String email, String password) {
        this.email = email;
        this.password = password;
        conn=CheckConnection.ConnectDb();
        initComponents();
    }
    
    public JournalistScreen() {
        conn=CheckConnection.ConnectDb();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        journalistTabbedPane = new javax.swing.JTabbedPane();
        submitArticlePanel = new javax.swing.JPanel();
        pathLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        summaryLabel = new javax.swing.JLabel();
        numberOfPagesLabel = new javax.swing.JLabel();
        keywordsLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        coauthorsLabel = new javax.swing.JLabel();
        pathField = new javax.swing.JTextField();
        titleField = new javax.swing.JTextField();
        summaryField = new javax.swing.JTextField();
        keywordsField = new javax.swing.JTextField();
        imageButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        categoryBox = new javax.swing.JComboBox<>();
        coauthorsScrollPanel = new javax.swing.JScrollPane();
        coauthorsList = new javax.swing.JList<>();
        numberOfPagesSpinner = new javax.swing.JSpinner();
        viewArticles = new javax.swing.JPanel();
        articlesScrollPane = new javax.swing.JScrollPane();
        articlesList = new javax.swing.JList<>();
        infoLabel2 = new javax.swing.JLabel();
        titleLabel2 = new javax.swing.JLabel();
        summaryLabel2 = new javax.swing.JLabel();
        statusLabel2 = new javax.swing.JLabel();
        commentsLabel2 = new javax.swing.JLabel();
        categoryLabel2 = new javax.swing.JLabel();
        keywordsLabel2 = new javax.swing.JLabel();
        coauthorsLabel2 = new javax.swing.JLabel();
        titleField2 = new javax.swing.JTextField();
        summaryField2 = new javax.swing.JTextField();
        statusField2 = new javax.swing.JTextField();
        commentsField2 = new javax.swing.JTextField();
        categoryField2 = new javax.swing.JTextField();
        keywordsField2 = new javax.swing.JTextField();
        coauthorsPane2 = new javax.swing.JScrollPane();
        coauthorsList2 = new javax.swing.JList<>();
        numberOfPages2 = new javax.swing.JLabel();
        numberOfPagesField2 = new javax.swing.JTextField();
        myArticlesLabel = new javax.swing.JLabel();
        reviseArticles = new javax.swing.JPanel();
        pathLabel3 = new javax.swing.JLabel();
        pathBox3 = new javax.swing.JComboBox<>();
        titleLabel3 = new javax.swing.JLabel();
        titleField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        summaryField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        keywordsField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        numberOfPagesSpinner3 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        categoryBox3 = new javax.swing.JComboBox<>();
        reviseButton3 = new javax.swing.JButton();
        journalistMenuBar = new javax.swing.JMenuBar();
        journalistMenu = new javax.swing.JMenu();
        logoutMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Journalist");

        pathLabel.setText("Path*");

        titleLabel.setText("Title*");

        summaryLabel.setText("Summary*");

        numberOfPagesLabel.setText("Number of Pages*");

        keywordsLabel.setText("Keywords(CSV)*");

        imageLabel.setText("Image*");

        categoryLabel.setText("Category*");

        coauthorsLabel.setText("Co-authors");

        imageButton.setText("Select Image");
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        try{
            List<String> names = new ArrayList<String>();
            String sql_query="SELECT name FROM category";

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql_query);

            while(rs.next()){
                names.add(rs.getString("name"));
            }

            String[] namesArr = names.toArray(new String[names.size()]);
            categoryBox.setModel(new javax.swing.DefaultComboBoxModel<>(namesArr));
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }

        try{
            List<String> emails = new ArrayList<String>();
            String sql_query="SELECT email FROM journalist WHERE email != " + "'"+ email+"'";

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql_query);

            while(rs.next()){
                emails.add(rs.getString("email"));
            }
            coauthorsList.setModel(new javax.swing.AbstractListModel<String>() {
                String[] emailsArr = emails.toArray(new String[emails.size()]);
                public int getSize() { return emailsArr.length; }
                public String getElementAt(int i) { return emailsArr[i]; }
            });
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        coauthorsScrollPanel.setViewportView(coauthorsList);

        numberOfPagesSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        javax.swing.GroupLayout submitArticlePanelLayout = new javax.swing.GroupLayout(submitArticlePanel);
        submitArticlePanel.setLayout(submitArticlePanelLayout);
        submitArticlePanelLayout.setHorizontalGroup(
            submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(submitArticlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, submitArticlePanelLayout.createSequentialGroup()
                        .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keywordsLabel)
                            .addComponent(numberOfPagesLabel))
                        .addGap(0, 21, Short.MAX_VALUE)
                        .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(coauthorsScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(numberOfPagesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imageButton)
                            .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keywordsField)))
                    .addGroup(submitArticlePanelLayout.createSequentialGroup()
                        .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel)
                            .addComponent(summaryLabel))
                        .addGap(77, 77, 77)
                        .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(summaryField)
                            .addComponent(titleField)))
                    .addComponent(submitButton)
                    .addGroup(submitArticlePanelLayout.createSequentialGroup()
                        .addComponent(pathLabel)
                        .addGap(109, 109, 109)
                        .addComponent(pathField))
                    .addComponent(imageLabel)
                    .addComponent(categoryLabel)
                    .addComponent(coauthorsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        submitArticlePanelLayout.setVerticalGroup(
            submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(submitArticlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathLabel)
                    .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(summaryLabel)
                    .addComponent(summaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keywordsLabel)
                    .addComponent(keywordsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfPagesLabel)
                    .addComponent(numberOfPagesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageLabel)
                    .addComponent(imageButton))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLabel)
                    .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submitArticlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coauthorsLabel)
                    .addComponent(coauthorsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitButton)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        journalistTabbedPane.addTab("Submit Article", submitArticlePanel);

        articlesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        articlesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                articlesListValueChanged(evt);
            }
        });
        articlesScrollPane.setViewportView(articlesList);
        try{
            List<String> articleList = new ArrayList<String>();
            String articleQuery = "SELECT `path` FROM `article` INNER JOIN submits ON path=article_path WHERE journalist_email = " + "'" + email + "'";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(articleQuery);

            while(rs.next()){
                articleList.add(rs.getString("path"));
            }

            String[] articleArray = articleList.toArray(new String[articleList.size()]);
            articlesList.setListData(articleArray);

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }

        infoLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabel2.setText("Info");

        titleLabel2.setText("Title");

        summaryLabel2.setText("Summary");

        statusLabel2.setText("Status");

        commentsLabel2.setText("Comments");

        categoryLabel2.setText("Category");

        keywordsLabel2.setText("Keywords");

        coauthorsLabel2.setText("Co-authors");

        titleField2.setEditable(false);

        summaryField2.setEditable(false);

        statusField2.setEditable(false);

        commentsField2.setEditable(false);

        categoryField2.setEditable(false);

        keywordsField2.setEditable(false);

        coauthorsList2.setSelectionInterval(-1, -1);
        coauthorsPane2.setViewportView(coauthorsList2);

        numberOfPages2.setText("Number of Pages");

        numberOfPagesField2.setEditable(false);

        myArticlesLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        myArticlesLabel.setText("My Articles");

        javax.swing.GroupLayout viewArticlesLayout = new javax.swing.GroupLayout(viewArticles);
        viewArticles.setLayout(viewArticlesLayout);
        viewArticlesLayout.setHorizontalGroup(
            viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewArticlesLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(articlesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myArticlesLabel))
                .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewArticlesLayout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(coauthorsPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(viewArticlesLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commentsLabel2)
                            .addComponent(numberOfPages2)
                            .addComponent(statusLabel2)
                            .addComponent(summaryLabel2)
                            .addComponent(titleLabel2)
                            .addComponent(categoryLabel2)
                            .addComponent(keywordsLabel2)
                            .addComponent(coauthorsLabel2)
                            .addComponent(infoLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(titleField2)
                            .addComponent(summaryField2)
                            .addComponent(statusField2, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(commentsField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(categoryField2, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(keywordsField2, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(numberOfPagesField2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(23, 23, 23))
        );
        viewArticlesLayout.setVerticalGroup(
            viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewArticlesLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel2)
                    .addComponent(myArticlesLabel))
                .addGap(33, 33, 33)
                .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewArticlesLayout.createSequentialGroup()
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(titleLabel2)
                            .addComponent(titleField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(summaryLabel2)
                            .addComponent(summaryField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusLabel2)
                            .addComponent(statusField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commentsLabel2)
                            .addComponent(commentsField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberOfPages2)
                            .addComponent(numberOfPagesField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryLabel2)
                            .addComponent(categoryField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keywordsLabel2)
                            .addComponent(keywordsField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(viewArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(coauthorsLabel2)
                            .addComponent(coauthorsPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(articlesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        journalistTabbedPane.addTab("View Artciles", viewArticles);

        pathLabel3.setText("Path");

        try{
            List<String> paths = new ArrayList<String>();
            String sql_query="SELECT `path` FROM `article` INNER JOIN submits ON path=article_path WHERE journalist_email = " + "'" + email + "'";

            Statement stmtInit = conn.createStatement();
            ResultSet rsInit = stmtInit.executeQuery(sql_query);

            while(rsInit.next()){
                paths.add(rsInit.getString("path"));
            }

            String[] pathsArr = paths.toArray(new String[paths.size()]);
            pathBox3.setModel(new javax.swing.DefaultComboBoxModel<>(pathsArr));
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }

        // Code adding the component to the parent container - not shown here
        pathBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pathBox3ItemStateChanged(evt);
            }
        });

        titleLabel3.setText("Title*");

        jLabel1.setText("Summary*");

        jLabel2.setText("Keywords*");

        jLabel3.setText("Number of Pages*");

        numberOfPagesSpinner3.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel4.setText("Category*");

        try{
            List<String> names = new ArrayList<String>();
            String sql_query="SELECT name FROM category";

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql_query);

            while(rs.next()){
                names.add(rs.getString("name"));
            }

            String[] namesArr = names.toArray(new String[names.size()]);
            categoryBox3.setModel(new javax.swing.DefaultComboBoxModel<>(namesArr));
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }

        reviseButton3.setText("Revise");
        reviseButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviseButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reviseArticlesLayout = new javax.swing.GroupLayout(reviseArticles);
        reviseArticles.setLayout(reviseArticlesLayout);
        reviseArticlesLayout.setHorizontalGroup(
            reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reviseArticlesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reviseArticlesLayout.createSequentialGroup()
                        .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pathLabel3)
                            .addComponent(titleLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(34, 34, 34)
                        .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pathBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(titleField3)
                                .addComponent(summaryField3)
                                .addComponent(keywordsField3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(numberOfPagesSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(reviseButton3))
                .addContainerGap(339, Short.MAX_VALUE))
        );
        reviseArticlesLayout.setVerticalGroup(
            reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reviseArticlesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathLabel3)
                    .addComponent(pathBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel3)
                    .addComponent(titleField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(summaryField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(keywordsField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(numberOfPagesSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reviseArticlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(categoryBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reviseButton3)
                .addContainerGap(341, Short.MAX_VALUE))
        );

        //Update other fields
        try{
            String categoryIDQuery = "SELECT `category_id` FROM `article` WHERE path = " + "'" + pathBox3.getSelectedItem().toString() + "'";
            Statement stmtCatID = conn.createStatement();
            ResultSet rsCatID = stmtCatID.executeQuery(categoryIDQuery);

            String categoryID = "";
            if(rsCatID.next()){
                categoryID = rsCatID.getString("category_id");
            }

            // Get category name from id
            String categoryQuery="SELECT name FROM category WHERE id= " + "'" + categoryID + "'";
            Statement stmtCat = conn.createStatement();
            ResultSet rsCat = stmtCat.executeQuery(categoryQuery);
            String categoryName = "";
            if(rsCat.next()){
                categoryName = rsCat.getString("name");
            }

            String articleQuery = "SELECT `title`, `summary`, `category_id`, `number_of_pages` FROM `article` WHERE path = " + "'" + pathBox3.getSelectedItem().toString() + "'";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(articleQuery);

            //Set the fields for title, summary, category, number_of_pages
            if(rs.next()){
                titleField3.setText(rs.getString("title"));
                summaryField3.setText(rs.getString("summary"));
                numberOfPagesSpinner3.setValue(rs.getInt("number_of_pages"));
                categoryBox3.setSelectedItem(categoryName);
            }

            //Set fields for keywords
            String keywordsQuery = "SELECT `keyword` FROM `keywords` WHERE article_path = " + "'" + pathBox3.getSelectedItem().toString() + "'";
            Statement stmtKey = conn.createStatement();
            ResultSet rsKey = stmtKey.executeQuery(keywordsQuery);

            List<String> keywordsList = new ArrayList<String>();

            while(rsKey.next()){
                keywordsList.add(rsKey.getString("keyword"));
            }

            String keywordsString = String.join(", ", keywordsList);
            keywordsField3.setText(keywordsString);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }

        journalistTabbedPane.addTab("Revise Article", reviseArticles);

        journalistMenu.setText("email");

        logoutMenuItem.setText("Logout");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        journalistMenu.add(logoutMenuItem);

        journalistMenu.setText(email);

        journalistMenuBar.add(journalistMenu);

        setJMenuBar(journalistMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(journalistTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(journalistTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        try{
            int noPages = (Integer) numberOfPagesSpinner.getValue();
            boolean pathCorr = false;
            //Check if the path is correct
            //Regex Unix: ^((\.\./|[a-zA-Z0-9_/\-\\])*\.[a-zA-Z0-9]+)$
            //Regex Windows: ^([a-zA-Z]\:|\\\\[^\/\\:*?"<>|]+\\[^\/\\:*?"<>|]+)(\\[^\/\\:*?"<>|]+)+(\.[^\/\\:*?"<>|]+)$

            String regexUnix = "^((\\.\\./|[a-zA-Z0-9_/\\-\\\\])*\\.[a-zA-Z0-9]+)$";
            String regexWindows = "^([a-zA-Z]\\:|\\\\\\\\[^\\/\\\\:*?\"<>|]+\\\\[^\\/\\\\:*?\"<>|]+)(\\\\[^\\/\\\\:*?\"<>|]+)+(\\.[^\\/\\\\:*?\"<>|]+)$";

            if((pathField.getText().matches(regexUnix) || pathField.getText().matches(regexWindows)) == true)
                pathCorr = true;
            
            
            if(pathField.getText().isEmpty()==false && titleField.getText().isEmpty()==false && summaryField.getText().isEmpty()==false && noPages >= 1 && keywordsField.getText().isEmpty()==false && categoryBox.getSelectedIndex()!=-1 && images!=null){
                if (pathCorr == true){
                
                    String categoryQuery="SELECT id FROM category WHERE name= " + "'" + categoryBox.getSelectedItem().toString() + "'";


                    // Get category id from name
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(categoryQuery);
                    String categoryID = "";
                    if(rs.next()){
                        categoryID = rs.getString("id");
                    }


                    //Insert elements into article
                    PreparedStatement pst = conn.prepareStatement("INSERT INTO `article` (`path`, `title`, `summary`, `number_of_pages`,`category_id`) VALUES (?, ?, ?, ?, ?)");

                    pst.setString(1, pathField.getText());
                    pst.setString(2, titleField.getText());
                    pst.setString(3, summaryField.getText());
                    pst.setInt(4, noPages);
                    pst.setString(5, categoryID);
                    

                    pst.execute();

                    //Insert elements into keywords
                    List<String> keywords = Arrays.asList(keywordsField.getText().split("\\s*,\\s*"));
                    PreparedStatement pstKeywords = conn.prepareStatement("INSERT INTO `keywords`(`article_path`, `keyword`) VALUES(?, ?)");

                    for (int i = 0; i < keywords.size(); i++) {
                        pstKeywords.setString(1, pathField.getText());
                        pstKeywords.setString(2, keywords.get(i));
                        pstKeywords.execute();
                    }
                    
                    //Insert elements into images
                    List<File> imagesList = Arrays.asList(images);
                    PreparedStatement pstImages = conn.prepareStatement("INSERT INTO `images`(`article_path`, `image`) VALUES(?, ?)");
                    
                    for (int i = 0; i < imagesList.size(); i++) {
                        InputStream imageStream = new FileInputStream(imagesList.get(i).getAbsolutePath());
                        pstImages.setString(1, pathField.getText());
                        pstImages.setBlob(2, imageStream);
                        pstImages.execute();
                    }
                    
                    
                    //Insert elements into sumbits
                    List<String> authors = coauthorsList.getSelectedValuesList();
                    PreparedStatement pstAuthors = conn.prepareStatement("INSERT INTO `submits`(`journalist_email`, `article_path`, submission_date) VALUES(?, ?, CURDATE())");

                    pstAuthors.setString(1, email);
                    pstAuthors.setString(2, pathField.getText());
                    pstAuthors.execute();
                    for (int i = 0; i < authors.size(); i++) {
                        pstAuthors.setString(1, authors.get(i));
                        pstAuthors.setString(2, pathField.getText());
                        pstAuthors.execute();
                    }
                    //Success panel
                    JOptionPane.showMessageDialog(null, "Article Submitted.");
                    
                    //Update the ViewList
                    try{
                        List<String> articleList = new ArrayList<String>();
                        String articleQuery = "SELECT `path` FROM `article` INNER JOIN submits ON path=article_path WHERE journalist_email = " + "'" + email + "'";
                        Statement stmtArt = conn.createStatement();
                        ResultSet rsArt = stmtArt.executeQuery(articleQuery);

                        while(rsArt.next()){
                            articleList.add(rsArt.getString("path"));
                        }

                        String[] articleArray = articleList.toArray(new String[articleList.size()]);
                        articlesList.setListData(articleArray);

                    //Update path screen 3
                    pathBox3.addItem(pathField.getText());
                        
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null, e.toString());
                    }
                    
                    pstImages.close();
                    pstAuthors.close();
                    pstKeywords.close();
                    pst.close();
                    rs.close();
                }else{
                    JOptionPane.showMessageDialog(null, "Wrong path. Try again.");
                }
            }else{
                JOptionPane.showMessageDialog(null, "Incomplete Credentials. Try again.");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
        
        JFileChooser imageChooser = new JFileChooser();
        imageChooser.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Images", "jpg", "jpeg", "png", "tif", "tiff");
        imageChooser.setFileFilter(filter);
        int returnVal = imageChooser.showOpenDialog(getParent());
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            images = imageChooser.getSelectedFiles();
            imageButton.setText("Image(s) Selected");
        }    
        
    }//GEN-LAST:event_imageButtonActionPerformed

    private void articlesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_articlesListValueChanged
        try{
            //Show the articles credentials
            if(articlesList.getSelectedIndex() != -1){
                String categoryIDQuery = "SELECT `category_id` FROM `article` WHERE path = " + "'" + articlesList.getSelectedValue() + "'";
                Statement stmtCatID = conn.createStatement();
                ResultSet rsCatID = stmtCatID.executeQuery(categoryIDQuery);
                
                String categoryID = "";
                if(rsCatID.next()){
                    categoryID = rsCatID.getString("category_id");
                }

                // Get category name from id
                String categoryQuery="SELECT name FROM category WHERE id= " + "'" + categoryID + "'";
                Statement stmtCat = conn.createStatement();
                ResultSet rsCat = stmtCat.executeQuery(categoryQuery);
                String categoryName = "";
                if(rsCat.next()){
                    categoryName = rsCat.getString("name");
                }
                
                String articleQuery = "SELECT `title`, `summary`, `status`, `comments`, `category_id`, `number_of_pages` FROM `article` WHERE path = " + "'" + articlesList.getSelectedValue() + "'";
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(articleQuery);
                
                
                //Set the fields for title, summary, status, comments, category, number_of_pages
                if(rs.next()){
                    titleField2.setText(rs.getString("title"));
                    summaryField2.setText(rs.getString("summary"));
                    switch(rs.getString("status")) {
                    case "accepted":
                        statusField2.setText("Accepted");
                        break;
                    case "to_be_revised":
                        statusField2.setText("To be revised");
                        break;
                    case "rejected":
                      statusField2.setText("Rejected");
                    }
                    commentsField2.setText(rs.getString("comments")==null ? "": rs.getString("comments"));
                    numberOfPagesField2.setText(rs.getString("number_of_pages"));
                    categoryField2.setText(categoryName);
                }
                
                //Set fields for keywords
                String keywordsQuery = "SELECT `keyword` FROM `keywords` WHERE article_path = " + "'" + articlesList.getSelectedValue() + "'";
                Statement stmtKey = conn.createStatement();
                ResultSet rsKey = stmtKey.executeQuery(keywordsQuery);
                
                List<String> keywordsList = new ArrayList<String>();
                
                while(rsKey.next()){
                    keywordsList.add(rsKey.getString("keyword"));
                }
                
                String keywordsString = String.join(", ", keywordsList);
                keywordsField2.setText(keywordsString);
                
                //Set fields for co-authors
                String coauthorsQuery = "SELECT `journalist_email` FROM `article` INNER JOIN submits ON path=article_path WHERE path = " + "'" + articlesList.getSelectedValue() +"'";
                Statement stmtCoauthors = conn.createStatement();
                ResultSet rsCoauthors = stmtCoauthors.executeQuery(coauthorsQuery);
                
                List<String> coauthorsListTab2 = new ArrayList<String>();
                
                while(rsCoauthors.next()){
                    if(rsCoauthors.getString("journalist_email").equals(email) == false){
                        coauthorsListTab2.add(rsCoauthors.getString("journalist_email"));
                    }
                }
                
                String[] coauthorsArrayTab2 = coauthorsListTab2.toArray(new String[coauthorsListTab2.size()]);
                coauthorsList2.setListData(coauthorsArrayTab2);
                        
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_articlesListValueChanged

    private void reviseButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviseButton3ActionPerformed
        try{
            int noPages3 = (Integer) numberOfPagesSpinner3.getValue();
            if(titleField3.getText().isEmpty()==false && summaryField3.getText().isEmpty()==false && noPages3 >= 1 && keywordsField3.getText().isEmpty()==false && categoryBox3.getSelectedIndex()!=-1){
                        
                // Get category id from name
                String categoryQuery="SELECT id FROM category WHERE name= " + "'" + categoryBox3.getSelectedItem().toString() + "'";
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(categoryQuery);
                String categoryID = "";
                if(rs.next()){
                    categoryID = rs.getString("id");
                }

                //Insert elements into article
                PreparedStatement pst = conn.prepareStatement("UPDATE `article` SET title = ?, summary = ?, number_of_pages = ?, category_id = ? WHERE path = " + "'" + pathBox3.getSelectedItem().toString() + "'");

                pst.setString(1, titleField3.getText());
                pst.setString(2, summaryField3.getText());
                pst.setInt(3, noPages3);
                pst.setString(4, categoryID);
                pst.execute();

                //Insert elements into keywords
                /*List<String> keywords = Arrays.asList(keywordsField3.getText().split("\\s*,\\s*"));
                PreparedStatement pstKeywords = conn.prepareStatement("INSERT INTO `keywords`(`article_path`, `keyword`) VALUES(?, ?)");

                for (int i = 0; i < keywords.size(); i++) {
                    pstKeywords.setString(1, pathBox3.getSelectedItem().toString());
                    pstKeywords.setString(2, keywords.get(i));
                    pstKeywords.execute();
                }
                */
                rs.close();
                pst.close();
                //pstKeywords.close();
                
                //Success panel
                JOptionPane.showMessageDialog(null, "Article Submitted.");
                
            }else{
                JOptionPane.showMessageDialog(null, "Incomplete Credentials. Try again.");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_reviseButton3ActionPerformed

    private void pathBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pathBox3ItemStateChanged
        try{
            if(evt.getStateChange()==ItemEvent.SELECTED){
                String categoryIDQuery = "SELECT `category_id` FROM `article` WHERE path = " + "'" + pathBox3.getSelectedItem().toString() + "'";
                Statement stmtCatID = conn.createStatement();
                ResultSet rsCatID = stmtCatID.executeQuery(categoryIDQuery);
                
                String categoryID = "";
                if(rsCatID.next()){
                    categoryID = rsCatID.getString("category_id");
                }

                // Get category name from id
                String categoryQuery="SELECT name FROM category WHERE id= " + "'" + categoryID + "'";
                Statement stmtCat = conn.createStatement();
                ResultSet rsCat = stmtCat.executeQuery(categoryQuery);
                String categoryName = "";
                if(rsCat.next()){
                    categoryName = rsCat.getString("name");
                }
                
                String articleQuery = "SELECT `title`, `summary`, `category_id`, `number_of_pages` FROM `article` WHERE path = " + "'" + pathBox3.getSelectedItem().toString() + "'";
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(articleQuery);
                
                
                //Set the fields for title, summary, category, number_of_pages
                if(rs.next()){
                    titleField3.setText(rs.getString("title"));
                    summaryField3.setText(rs.getString("summary"));
                    numberOfPagesSpinner3.setValue(rs.getInt("number_of_pages"));
                    categoryBox3.setSelectedItem(categoryName);
                }
                
                //Set fields for keywords
                String keywordsQuery = "SELECT `keyword` FROM `keywords` WHERE article_path = " + "'" + pathBox3.getSelectedItem().toString() + "'";
                Statement stmtKey = conn.createStatement();
                ResultSet rsKey = stmtKey.executeQuery(keywordsQuery);
                
                List<String> keywordsList = new ArrayList<String>();
                
                while(rsKey.next()){
                    keywordsList.add(rsKey.getString("keyword"));
                }
                
                String keywordsString = String.join(", ", keywordsList);
                keywordsField3.setText(keywordsString);
                        
            }  
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_pathBox3ItemStateChanged

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        LoginScreen var_ls = new LoginScreen();
        var_ls.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_logoutMenuItemActionPerformed
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JournalistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JournalistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JournalistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JournalistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JournalistScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> articlesList;
    private javax.swing.JScrollPane articlesScrollPane;
    private javax.swing.JComboBox<String> categoryBox;
    private javax.swing.JComboBox<String> categoryBox3;
    private javax.swing.JTextField categoryField2;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JLabel categoryLabel2;
    private javax.swing.JLabel coauthorsLabel;
    private javax.swing.JLabel coauthorsLabel2;
    private javax.swing.JList<String> coauthorsList;
    private javax.swing.JList<String> coauthorsList2;
    private javax.swing.JScrollPane coauthorsPane2;
    private javax.swing.JScrollPane coauthorsScrollPanel;
    private javax.swing.JTextField commentsField2;
    private javax.swing.JLabel commentsLabel2;
    private javax.swing.JButton imageButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel infoLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu journalistMenu;
    private javax.swing.JMenuBar journalistMenuBar;
    private javax.swing.JTabbedPane journalistTabbedPane;
    private javax.swing.JTextField keywordsField;
    private javax.swing.JTextField keywordsField2;
    private javax.swing.JTextField keywordsField3;
    private javax.swing.JLabel keywordsLabel;
    private javax.swing.JLabel keywordsLabel2;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JLabel myArticlesLabel;
    private javax.swing.JLabel numberOfPages2;
    private javax.swing.JTextField numberOfPagesField2;
    private javax.swing.JLabel numberOfPagesLabel;
    private javax.swing.JSpinner numberOfPagesSpinner;
    private javax.swing.JSpinner numberOfPagesSpinner3;
    private javax.swing.JComboBox<String> pathBox3;
    private javax.swing.JTextField pathField;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JLabel pathLabel3;
    private javax.swing.JPanel reviseArticles;
    private javax.swing.JButton reviseButton3;
    private javax.swing.JTextField statusField2;
    private javax.swing.JLabel statusLabel2;
    private javax.swing.JPanel submitArticlePanel;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField summaryField;
    private javax.swing.JTextField summaryField2;
    private javax.swing.JTextField summaryField3;
    private javax.swing.JLabel summaryLabel;
    private javax.swing.JLabel summaryLabel2;
    private javax.swing.JTextField titleField;
    private javax.swing.JTextField titleField2;
    private javax.swing.JTextField titleField3;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel titleLabel2;
    private javax.swing.JLabel titleLabel3;
    private javax.swing.JPanel viewArticles;
    // End of variables declaration//GEN-END:variables

}
